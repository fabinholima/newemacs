#+BEGIN_SRC emacs-lisp :tangle yes

(setq default-frame-alist
      (append (list '(width  . 72) '(height . 40)
                    '(vertical-scroll-bars . nil)
                    '(internal-border-width . 24)
                    '(font . "Roboto Mono Light 14"))))
(set-frame-parameter (selected-frame)
                     'internal-border-width 24)
;;; -------------------------------------------------------------------

;;; Line spacing, can be 0 for code and 1 or 2 for text
;;; -------------------------------------------------------------------
(setq-default line-spacing 0)
(setq x-underline-at-descent-line t)
(setq widget-image-enable nil)
;;; -------------------------------------------------------------------

;;; Line cursor and no blink
;;; -------------------------------------------------------------------
(set-default 'cursor-type  '(bar . 1))
(blink-cursor-mode 0)
;;; -------------------------------------------------------------------


;;; No sound
;;; -------------------------------------------------------------------
(setq visible-bell t)
(setq ring-bell-function 'ignore)
;;; -------------------------------------------------------------------


;;; No Tooltips
;;; -------------------------------------------------------------------
(tooltip-mode 0)
;;; -------------------------------------------------------------------


;;; Paren mode is part of the theme
;;; -------------------------------------------------------------------
(show-paren-mode t)
;;; -------------------------------------------------------------------


;;; When we set a face, we take care of removing any previous settings
;;; -------------------------------------------------------------------
(defun set-face (face style)
  "Reset a FACE and make it inherit STYLE."
  (set-face-attribute face nil
   :foreground 'unspecified :background 'unspecified
   :family     'unspecified :slant      'unspecified
   :weight     'unspecified :height     'unspecified
   :underline  'unspecified :overline   'unspecified
   :box        'unspecified :inherit    style))
;;; -------------------------------------------------------------------


;;; A theme is fully defined by these six faces
;;; -------------------------------------------------------------------
(defgroup elegance nil
  "Faces for the elegance theme"
  :prefix "elegance-face-"
  :group 'faces)
;;; -------------------------------------------------------------------


;;; Custom faces definition
;;; -------------------------------------------------------------------
(defface face-critical nil
"Critical face is for information that requires immediate action.
It should be of high constrast when compared to other faces. This
can be realized (for example) by setting an intense background
color, typically a shade of red. It must be used scarcely."
:group 'elegance)

(defface face-popout nil
"Popout face is used for information that needs attention.
To achieve such effect, the hue of the face has to be
sufficiently different from other faces such that it attracts
attention through the popout effect."
:group 'elegance)

(defface face-strong nil
"Strong face is used for information of a structural nature.
It has to be the same color as the default color and only the
weight differs by one level (e.g., light/regular or
regular/bold). IT is generally used for titles, keywords,
directory, etc."
:group 'elegance)

(defface face-salient nil
"Salient face is used for information that are important.
To suggest the information is of the same nature but important,
the face uses a different hue with approximately the same
intensity as the default face. This is typically used for links."

:group 'elegance)

(defface face-faded nil
"Faded face is for information that are less important.
It is made by using the same hue as the default but with a lesser
intensity than the default. It can be used for comments,
secondary information and also replace italic (which is generally
abused anyway)."
:group 'elegance)

(defface face-subtle nil
"Subtle face is used to suggest a physical area on the screen.
It is important to not disturb too strongly the reading of
information and this can be made by setting a very light
background color that is barely perceptible."
:group 'elegance)
;;; -------------------------------------------------------------------


;;; Mode line rendering
;;; -------------------------------------------------------------------
;;; This line below makes things a bit faster
(set-fontset-font "fontset-default"  '(#x2600 . #x26ff) "Fira Code 16")

(define-key mode-line-major-mode-keymap [header-line]
  (lookup-key mode-line-major-mode-keymap [mode-line]))

(defun mode-line-render (left right)
  "Function to render the modeline LEFT to RIGHT."
  (let* ((available-width (- (window-width) (length left) )))
    (format (format "%%s %%%ds" available-width) left right)))
(setq-default mode-line-format
     '((:eval
       (mode-line-render
       (format-mode-line (list
         (propertize "☰" 'face `(:inherit mode-line-buffer-id)
                         'help-echo "Mode(s) menu"
                         'mouse-face 'mode-line-highlight
                         'local-map   mode-line-major-mode-keymap)
         " %b "
         (if (and buffer-file-name (buffer-modified-p))
             (propertize "(modified)" 'face `(:inherit face-faded)))))
       (format-mode-line
        (propertize "%4l:%2c" 'face `(:inherit face-faded)))))))
;;; -------------------------------------------------------------------


;;; Set modeline at the top
;;; -------------------------------------------------------------------
(setq-default header-line-format mode-line-format)
(setq-default mode-line-format'(""))
;;; -------------------------------------------------------------------

              
;;; Vertical window divider
;;; -------------------------------------------------------------------
(setq window-divider-default-right-width 3)
(setq window-divider-default-places 'right-only)
(window-divider-mode)
;;; -------------------------------------------------------------------


;;; Modeline
;;; -------------------------------------------------------------------
(defun set-modeline-faces ()
  "Mode line at top."
  (set-face 'header-line                                 'face-strong)
  (set-face-attribute 'header-line nil
                                :underline (face-foreground 'default))
  (set-face-attribute 'mode-line nil
                      :height 10
                      :underline (face-foreground 'default)
                      :overline nil
                      :box nil 
                      :foreground (face-background 'default)
                      :background (face-background 'default))
  (set-face 'mode-line-inactive                            'mode-line)
  (set-face-attribute 'cursor nil
                      :background (face-foreground 'default))
  (set-face-attribute 'window-divider nil
                      :foreground (face-background 'mode-line))
  (set-face-attribute 'window-divider-first-pixel nil
                      :foreground (face-background 'default))
  (set-face-attribute 'window-divider-last-pixel nil
                      :foreground (face-background 'default)))
;;; -------------------------------------------------------------------


;;; Buttons
;;; -------------------------------------------------------------------
(defun set-button-faces ()
  "Set button faces."
  (set-face-attribute 'custom-button nil
                      :foreground (face-foreground 'face-faded)
                      :background (face-background 'face-subtle)
                      :box `(:line-width 1
                             :color ,(face-foreground 'face-faded)
                             :style nil))
  (set-face-attribute 'custom-button-mouse nil
                      :foreground (face-foreground 'default)
                      ;;; :background (face-foreground 'face-faded)
                      :inherit 'custom-button
                      :box `(:line-width 1
                             :color ,(face-foreground 'face-subtle)
                             :style nil))
  (set-face-attribute 'custom-button-pressed nil
                      :foreground (face-background 'default)
                      :background (face-foreground 'face-salient)
                      :inherit 'face-salient
                      :box `(:line-width 1
                             :color ,(face-foreground 'face-salient)
                             :style nil)
                      :inverse-video nil))
'(cus-edit (set-button-faces))
;;; -------------------------------------------------------------------




;; Structural
;; -------------------------------------------------------------------
(set-face 'bold                                          'face-strong)
(set-face 'italic                                         'face-faded)
(set-face 'bold-italic                                   'face-strong)
(set-face 'region                                        'face-subtle)
(set-face 'highlight                                     'face-subtle)
(set-face 'fixed-pitch                                       'default)
(set-face 'fixed-pitch-serif                                 'default)
(set-face 'variable-pitch                                    'default)
(set-face 'cursor                                            'default)
;;; -------------------------------------------------------------------


;; Semantic
;;; -------------------------------------------------------------------
(set-face 'shadow                                         'face-faded)
(set-face 'success                                      'face-salient)
(set-face 'warning                                       'face-popout)
(set-face 'error                                       'face-critical)
;;; -------------------------------------------------------------------


;; General
;;; -------------------------------------------------------------------
(set-face 'buffer-menu-buffer                            'face-strong)
(set-face 'minibuffer-prompt                             'face-strong)
(set-face 'link                                         'face-salient)
(set-face 'fringe                                         'face-faded)
(set-face 'isearch                                       'face-strong)
(set-face 'isearch-fail                                   'face-faded)
(set-face 'lazy-highlight                                'face-subtle)
(set-face 'trailing-whitespace                           'face-subtle)
(set-face 'show-paren-match                              'face-popout)
(set-face 'show-paren-mismatch                           'face-normal)
(set-face-attribute 'tooltip nil                         :height 0.85)
;;; -------------------------------------------------------------------


;; Programmation mode
;;; -------------------------------------------------------------------
(set-face 'font-lock-comment-face                         'face-faded)
(set-face 'font-lock-doc-face                             'face-faded)
(set-face 'font-lock-string-face                         'face-popout)
(set-face 'font-lock-constant-face                      'face-salient)
(set-face 'font-lock-warning-face                        'face-popout)
(set-face 'font-lock-function-name-face                  'face-strong)
(set-face 'font-lock-variable-name-face                  'face-strong)
(set-face 'font-lock-builtin-face                       'face-salient)
(set-face 'font-lock-type-face                          'face-salient)
(set-face 'font-lock-keyword-face                       'face-salient)
;;; -------------------------------------------------------------------


;; Documentation
;;; -------------------------------------------------------------------
''(set-face 'info-header-node                            'face-normal)
'(set-face 'Info-quoted                                  'face-faded)
'(set-face 'info-title-1                                'face-strong)
'(set-face 'info-title-2                                'face-strong)
'(set-face 'info-title-3                                'face-strong)
'(set-face 'info-title-4                               'face-strong)
;;; -------------------------------------------------------------------


;; Bookmarks
;;; -------------------------------------------------------------------
'(bookmark-menu-heading                       'face-strong)
'(bookmark-menu-bookmark                    'face-salient)
;;; -------------------------------------------------------------------


;; Message
;;; -------------------------------------------------------------------
'(message-cited-text                           'face-faded)
'(message-header-cc                               'default)
'(message-header-name                         'face-strong)
'(message-header-newsgroups                       'default)
'(message-header-other                            'default)
'(message-header-subject                     'face-salient)
'(message-header-to                          'face-salient)
'(message-header-xheader                          'default)
'(message-mml                                 'face-popout)
'(message-separator                           'face-faded)
;;; -------------------------------------------------------------------


;; Outline
;;; -------------------------------------------------------------------
'(outline-1                                   'face-strong)
'(outline-2                                   'face-strong)
'(outline-3                                   'face-strong)
'(outline-4                                   'face-strong)
'(outline-5                                   'face-strong)
'(outline-6                                   'face-strong)
'(outline-7                                   'face-strong)
'(outline-8                                  'face-strong)
;;; -------------------------------------------------------------------


;; Interface
;;; -------------------------------------------------------------------
'(widget-field                                'face-subtle)
'(widget-button                               'face-strong)
'(widget-single-line-field                    'face-subtle)
'(custom-group-subtitle                       'face-strong)
'(custom-group-tag                            'face-strong)
'(custom-group-tag-1                          'face-strong)
'(custom-comment                               'face-faded)
'(custom-comment-tag                           'face-faded)
'(custom-changed                             'face-salient)
'(custom-modified                            'face-salient)
'(custom-face-tag                             'face-strong)
'(custom-variable-tag                             'default)
'(custom-invalid                              'face-popout)
'(custom-visibility                          'face-salient)
'(custom-state                               'face-salient)
'(custom-link                               'face-salient)
;;; -------------------------------------------------------------------


;; Package
;;; -------------------------------------------------------------------
'(package-description                             'default)
'(package-help-section-name                       'default)
'(package-name                               'face-salient)
'(package-status-avail-obso                    'face-faded)
'(package-status-available                        'default)
'(package-status-built-in                    'face-salient)
'(package-status-dependency                  'face-salient)
'(package-status-disabled                      'face-faded)
'(package-status-external                         'default)
'(package-status-held                             'default)
'(package-status-incompat                      'face-faded)
'(package-status-installed                   'face-salient)
'(package-status-new                              'default)
'(package-status-unsigned                         'default)
;;; -------------------------------------------------------------------


;; Button function (hardcoded)
;;; -------------------------------------------------------------------
  (defun package-make-button (text &rest properties)
    "Insert button labeled TEXT with button PROPERTIES at point.
PROPERTIES are passed to `insert-text-button', for which this
function is a convenience wrapper used by `describe-package-1'."
    (let ((button-text (if (display-graphic-p)
                           text (concat "[" text "]")))
          (button-face (if (display-graphic-p)
                           '(:box `(:line-width 1
                             :color "#999999":style nil)
                            :foreground "#999999"
                            :background "#F0F0F0")
                         'link)))
      (apply #'insert-text-button button-text
             'face button-face 'follow-link t properties)))
;;; -------------------------------------------------------------------


;; Flyspell
;;; -------------------------------------------------------------------
'(flyspell-duplicate                         'face-popout)
'(flyspell-incorrect                         'face-popout)
;;; -------------------------------------------------------------------


;; Ido 
;;; -------------------------------------------------------------------
'(ido-first-match                            'face-salient)
'(ido-only-match                               'face-faded)
'(ido-subdir                                 'face-strong)
;;; -------------------------------------------------------------------


;; Diff
;;; -------------------------------------------------------------------
'(diff-header                                  'face-faded)
'(diff-file-header                            'face-strong)
'(diff-context                                    'default)
'(diff-removed                                 'face-faded)
'(diff-changed                                'face-popout)
'(diff-added                                 'face-salient)
'(diff-refine-added            '(face-salient face-strong))
'(diff-refine-changed                         'face-popout)
'(diff-refine-removed                          'face-faded)
'(set-face-attribute     'diff-refine-removed nil :strike-through t)
;;; -------------------------------------------------------------------


;; Term
;;; -------------------------------------------------------------------
'(term-bold                                   'face-strong)
'(set-face-attribute 'term-color-black nil
         :foreground (face-foreground 'default)
         :background (face-foreground 'default))
'(set-face-attribute 'term-color-white nil
         :foreground "white" :background "white")
'(set-face-attribute 'term-color-blue nil
         :foreground "#42A5F5" :background "#BBDEFB")
'(set-face-attribute 'term-color-cyan nil
         :foreground "#26C6DA" :background "#B2EBF2")
'(set-face-attribute 'term-color-green nil
         :foreground "#66BB6A" :background "#C8E6C9")
'(set-face-attribute 'term-color-magenta nil
         :foreground "#AB47BC" :background "#E1BEE7")
'(set-face-attribute 'term-color-red nil
         :foreground "#EF5350" :background "#FFCDD2")
'(set-face-attribute 'term-color-yellow nil
         :foreground "#FFEE58" :background "#FFF9C4")
;;; -------------------------------------------------------------------


;; org-agendas
;;; -------------------------------------------------------------------
'(org-agenda-calendar-event                    'default)
'(org-agenda-calendar-sexp                     'face-faded)
'(org-agenda-clocking                          'face-faded)
'(org-agenda-column-dateline                   'face-faded)
'(org-agenda-current-time                      'face-faded)
'(org-agenda-date                            'face-salient)
'(org-agenda-date-today        '(face-salient face-strong))
'(org-agenda-date-weekend                      'face-faded)
'(org-agenda-diary                             'face-faded)
'(org-agenda-dimmed-todo-face                  'face-faded)
'(org-agenda-done                              'face-faded)
'(org-agenda-filter-category                   'face-faded)
'(org-agenda-filter-effort                     'face-faded)
'(org-agenda-filter-regexp                     'face-faded)
'(org-agenda-filter-tags                       'face-faded)
'(org-agenda-restriction-lock                  'face-faded)
'(org-agenda-structure                        'face-faded)
;;; -------------------------------------------------------------------


;; org mode
;;; -------------------------------------------------------------------
'(org-archived                                 'face-faded)
'(org-block                                    'face-faded)
'(org-block-begin-line                         'face-faded)
'(org-block-end-line                           'face-faded)
'(org-checkbox                                 'face-faded)
'(org-checkbox-statistics-done                 'face-faded)
'(org-checkbox-statistics-todo                 'face-faded)
'(org-clock-overlay                            'face-faded)
'(org-code                                     'face-faded)
'(org-column                                   'face-faded)
'(org-column-title                             'face-faded)
'(org-date                                     'face-faded)
'(org-date-selected                            'face-faded)
'(org-default                                  'face-faded)
'(org-document-info                            'face-faded)
'(org-document-info-keyword                    'face-faded)
'(org-document-title                           'face-faded)
'(org-done                                        'default)
'(org-drawer                                   'face-faded)
'(org-ellipsis                                 'face-faded)
'(org-footnote                                 'face-faded)
'(org-formula                                  'face-faded)
'(org-headline-done                            'face-faded)
'(org-latex-and-related                        'face-faded)
'(org-level-1                                 'face-strong)
'(org-level-2                                 'face-strong)
'(org-level-3                                 'face-strong)
'(org-level-4                                 'face-strong)
'(org-level-5                                 'face-strong)
'(org-level-6                                 'face-strong)
'(org-level-7                                 'face-strong)
'(org-level-8                                 'face-strong)
'(org-link                                   'face-salient)
'(org-list-dt                                  'face-faded)
'(org-macro                                    'face-faded)
'(org-meta-line                                'face-faded)
'(org-mode-line-clock                          'face-faded)
'(org-mode-line-clock-overrun                  'face-faded)
'(org-priority                                 'face-faded)
'(org-property-value                           'face-faded)
'(org-quote                                    'face-faded)
'(org-scheduled                                'face-faded)
'(org-scheduled-previously                     'face-faded)
'(org-scheduled-today                          'face-faded)
'(org-sexp-date                                'face-faded)
'(org-special-keyword                          'face-faded)
'(org-table                                    'face-faded)
'(org-tag                                      'face-faded)
'(org-tag-group                                'face-faded)
'(org-target                                   'face-faded)
'(org-time-grid                                'face-faded)
'(org-todo                                    'face-popout)
'(org-upcoming-deadline                        'face-faded)
'(org-verbatim                                 'face-faded)
'(org-verse                                    'face-faded)
'(org-warning                                'face-popout)
(setq org-hide-emphasis-markers t)
;;; -------------------------------------------------------------------


;; Mu4e
;;; -------------------------------------------------------------------
'(mu4e-attach-number-face                     'face-strong)
'(mu4e-cited-1-face                            'face-faded)
'(mu4e-cited-2-face                            'face-faded)
'(mu4e-cited-3-face                            'face-faded)
'(mu4e-cited-4-face                            'face-faded)
'(mu4e-cited-5-face                            'face-faded)
'(mu4e-cited-6-face                            'face-faded)
'(mu4e-cited-7-face                            'face-faded)
'(mu4e-compose-header-face                     'face-faded)
'(mu4e-compose-separator-face                  'face-faded)
'(mu4e-contact-face                          'face-salient)
'(mu4e-context-face                            'face-faded)
'(mu4e-draft-face                              'face-faded)
'(mu4e-flagged-face                            'face-faded)
'(mu4e-footer-face                             'face-faded)
'(mu4e-forwarded-face                          'face-faded)
'(mu4e-header-face                                'default)
'(mu4e-header-highlight-face                  'face-subtle)
'(mu4e-header-key-face                        'face-strong)
'(mu4e-header-marks-face                       'face-faded)
'(mu4e-header-title-face                      'face-strong)
'(mu4e-header-value-face                          'default)
'(mu4e-highlight-face                         'face-popout)
'(mu4e-link-face                             'face-salient)
'(mu4e-modeline-face                           'face-faded)
'(mu4e-moved-face                              'face-faded)
'(mu4e-ok-face                                 'face-faded)
'(mu4e-region-code                             'face-faded)
'(mu4e-replied-face                          'face-salient)
'(mu4e-special-header-value-face                  'default)
'(mu4e-system-face                             'face-faded)
'(mu4e-title-face                             'face-strong)
'(mu4e-trashed-face                            'face-faded)
'(mu4e-unread-face                            'face-strong)
'(mu4e-url-number-face                         'face-faded)
'(mu4e-view-body-face                             'default)
'(mu4e-warning-face                            'face-faded)
;;; -------------------------------------------------------------------


;;;;###autoload
;;; -------------------------------------------------------------------
(when load-file-name
  (add-to-list 'custom-theme-load-path
               (file-name-as-directory (file-name-directory load-file-name))))

#+END_SRC


* Theme Emacs Dark

#+BEGIN_SRC emacs-lisp :tangle yes

(deftheme elegant-dark
  "A simple yet elegant theme for emacs.")
;;; -------------------------------------------------------------------


;;; Require elegant-emacs-common
;;; -------------------------------------------------------------------
; (load "~/.emacs.d/elegant/elegant.el")
;;(require 'elegant)
;;; -------------------------------------------------------------------


;;; General colors
;;; -------------------------------------------------------------------
(set-background-color "#3f3f3f")
(set-foreground-color "#dcdccc")
(set-face-attribute 'default nil
        :foreground (face-foreground 'default)
        :background (face-background 'default))
(set-face-attribute 'face-critical nil :foreground "#385f38"
        :background "#f8f893")
(set-face-attribute 'face-popout nil :foreground "#f0dfaf")
(set-face-attribute 'face-strong nil :foreground "#dcdccc"
        :weight 'regular)
(set-face-attribute 'face-salient nil :foreground "#dca3a3"
        :weight 'light)
(set-face-attribute 'face-faded nil :foreground "#777767"
        :weight 'light)
(set-face-attribute 'face-subtle nil :background "#4f4f4f")
(set-modeline-faces)


#+END_SRC




* Theme Light


#+BEGIN_SRC emacs-lisp :tangle yes


(deftheme elegant-light
  "A simple yet elegant theme for emacs.")
;;; -------------------------------------------------------------------


;;; Require elegant-emacs-common
;;; -------------------------------------------------------------------
;; (load "~/.emacs.d/elegant/elegant.el")
;; (require 'elegant)
;;; -------------------------------------------------------------------


;;; General colors
;;; -------------------------------------------------------------------
(set-background-color "#ffffff")
(set-foreground-color "#333333")
(set-face-attribute 'default nil
        :foreground (face-foreground 'default)
        :background (face-background 'default))
(set-face-attribute 'face-critical nil :foreground "#ffffff"
        :background "#ff6347")
(set-face-attribute 'face-popout nil :foreground "#ffa07a")
(set-face-attribute 'face-strong nil :foreground "#333333"
        :weight 'regular)
(set-face-attribute 'face-salient nil :foreground "#00008b"
        :weight 'light)
(set-face-attribute 'face-faded nil :foreground "#999999"
        :weight 'light)
(set-face-attribute 'face-subtle nil :background "#f0f0f0")

(set-modeline-faces)

'(cus-edit (set-button-faces))

#+END_SRC



** Maximized Emacs
 Maximized Emacs 
#+BEGIN_SRC emacs-lisp :tangle yes
(add-to-list 'default-frame-alist '(fullscreen . maximized))
;; Bufer automatic
(global-auto-revert-mode 1)
(setq inhibit-startup-message t)  
(setq inhibit-startup-screen t
      initial-buffer-choice  nil)
;; Forces the messages to 0, and kills the *Messages* buffer - thus disabling it on startup.
(setq-default message-log-max nil)
(kill-buffer "*Messages*")
#+END_SRC





** Configurações Pessoais

#+BEGIN_SRC emacs-lisp :tangle yes
(setq-default
 ad-redefinition-action 'accept                   ; Silence warnings for redefinition
 cursor-in-non-selected-windows t                 ; Hide the cursor in inactive windows
 display-time-default-load-average nil            ; Don't display load average
 fill-column 80                                   ; Set width for automatic line breaks
 help-window-select t                             ; Focus new help windows when opened
 indent-tabs-mode nil                             ; Prefers spaces over tabs
 inhibit-startup-screen t                         ; Disable start-up screen
 initial-scratch-message ""                       ; Empty the initial *scratch* buffer
 kill-ring-max 128                                ; Maximum length of kill ring
 load-prefer-newer t                              ; Prefers the newest version of a file
 mark-ring-max 128                                ; Maximum length of mark ring
 scroll-conservatively most-positive-fixnum       ; Always scroll by one line
 select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
 tab-width 4                                      ; Set width for tabs
 use-package-always-ensure t                      ; Avoid the :ensure keyword for each package
 user-full-name "Fabio Lima"               ; Set the full name of the current user
 user-mail-address "fabio.delima21@gmail.com"  ; Set the email address of the current user
 vc-follow-symlinks t                             ; Always follow the symlinks
 view-read-only t)                                ; Always open read-only buffers in view-mode
(cd "~/")                                         ; Move to the user directory
(column-number-mode 1)                            ; Show the column number
(display-time-mode 1)                             ; Enable time in the mode-line
(fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
(global-hl-line-mode)                             ; Hightlight current line
(set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
(show-paren-mode 1)                               ; Show the parent
#+END_SRC


** Configuração para o keyboard MacOSX

#+BEGIN_SRC emacs-lisp :tangle yes
(setq mac-command-modifier 'meta)
(setq mac-option-modifier 'super)
;; Check the system 
(when (eq system-type 'darwin)
  (setq mac-right-option-modifier 'none))
#+END_SRC


** PATH Exec

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package exec-path-from-shell)

(when (or (memq window-system '(mac ns x))
          (unless (memq system-type '(ms-dos windows-nt))
            (daemonp)))
  (exec-path-from-shell-initialize))
#+END_SRC



* Load Theme 

#+BEGIN_SRC emacs-lisp :tangle yes
(defun set-light-theme ()
  "Set the light theme with some customization if needed."
  (interactive)
  (elegant-light))

(defun set-dark-theme ()
  "Set the dark theme with some customization if needed."
  (interactive)
  (elegant-dark))

(let ((current-hour (string-to-number (format-time-string "%H"))))
  (if (or (< current-hour 6) (> current-hour 19)) (set-light-theme) (set-dark-theme)))


(defun theme-switcher ()
  (let ((current-hour (string-to-number (format-time-string "%H"))))
    (if (or (< current-hour 6) (> current-hour 19)) (set-light-theme) (set-dark-theme))))

;; Run at every 3600 seconds, after 0s delay
(run-with-timer 0 10800 'theme-switcher)
#+END_SRC


* Change size scale 

#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "C-+") #'text-scale-increase)
  (global-set-key (kbd "C--") #'text-scale-decrease)
#+END_SRC





* Org Mode 

** Org Bullets for mode org 

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-bullets
  :hook (org-mode . org-bullets-mode)
  :custom
  ;(org-bullets-bullet-list '("●" "►" "▸"))
  (org-bullets-bullet-list '("◉" "◎" "⚫" "○" "►" "◇"))
  )
#+END_SRC


** Persistent-scratch

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package persistent-scratch
  :config
  (persistent-scratch-setup-default))
#+END_SRC


* General

** Org packages 

Org mode already comes with Emacs, but it is important that we make
sure we have the latest version installed.

#+BEGIN_SRC emacs-lisp :tangle yes
;(use-package org :ensure org-plus-contrib)
#+END_SRC

As a general note, I just disable the prompts for code evaluation on
Org. You might want to remove this on your end.

#+BEGIN_SRC emacs-lisp :tangle yes
;(setq-default org-confirm-babel-evaluate nil)
#+END_SRC



** Agenda Views


#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'org-agenda)
  (setq org-agenda-include-diary t
  calendar-week-start-day 0
  calendar-day-name-array ["Domingo" "Segunda" "Terça" "Quarta"
         "Quinta" "Sexta" "Sábado"]
  calendar-month-name-array ["Janeiro" "Fevereiro" "Março" "Abril"
           "Maio" "Junho" "Julho" "Agosto"
           "Setembro" "Outubro" "Novembro" "Dezembro"])


  (add-to-list 'org-agenda-custom-commands
         '("Y" "Agenda anual de aniversários e feriados" agenda "Visão Anual"
     ((org-agenda-span 365)
      (org-agenda-filter-by-category 'Aniversário)
      (org-agenda-time-grid nil))))
  (add-to-list 'org-agenda-custom-commands
         '("1" "Agenda mensal" agenda "Visão Mensal"
     ((org-agenda-span 31)
      (org-agenda-time-grid nil))))
  (add-to-list 'org-agenda-custom-commands
         '("7" "Agenda dos próximos sete dias" agenda "Visão de Sete Dias"
     ((org-agenda-span 7)
      (org-agenda-time-grid nil))))
(define-key global-map (kbd "C-c a") 'org-agenda)
(setq org-agenda-files '("~/Dropbox/Org"))
#+END_SRC



* Dasboard Emacs
 
** Dasboard

#+BEGIN_SRC emacs-lisp :tangle yes 
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
(setq dashboard-startup-banner 'logo)
(setq dashboard-banner-logo-title "With Great Power Comes Great Responsibility")
(setq dashboard-center-content t)
(setq dashboard-show-shortcuts nil)

(setq dashboard-set-heading-icons t)
(setq dashboard-set-file-icons t)



 (setq dashboard-navigator-buttons
      `(;; line1
        ((,(all-the-icons-faicon "gitlab" :height 1.1 :v-adjust 0.0)
         "Homepage"
         "Browse homepage"
         (lambda (&rest _) (browse-url "http://www.gitlab.com/flima21")))
          ; Second Icon
                    ;        
          (,(all-the-icons-material "update" :height 1.1 :v-adjust 0.0)
          "Update"
          ""
          (lambda (&rest _) (package-refresh-contents " "))
          )

         ;("⚑" nil "Show flags" (lambda (&rest _) (message "flag")) error)
         )
        )
      )
  
 
 (setq dashboard-set-init-info t)
 
  (setq dashboard-items '((recents  . 5)
                        ;(bookmarks . 5)
                        ;(projects . 3)
                        (agenda . 7)
                        ;(registers . 5)
                        ))

(setq show-week-agenda-p t)

(setq dashboard-set-navigator t)
#+END_SRC


** Centaurs Tabs

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package centaur-tabs
  :demand
  :config
  (centaur-tabs-mode t)
  :bind
  ("C-<prior>" . centaur-tabs-backward)
  ("C-<next>" . centaur-tabs-forward))
  (setq centaur-tabs-style "bar")
  (setq centaur-tabs-set-icons t)
  (setq centaur-tabs-set-bar 'under)
  (setq x-underline-at-descent-line t)
  (setq centaur-tabs-show-navigation-buttons t)

#+END_SRC




** Magit config 

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package magit)
#+END_SRC



** Theemcas package 

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package treemacs
    :defines winum-keymap
    :commands (treemacs-follow-mode
               treemacs-filewatch-mode
               treemacs-fringe-indicator-mode
               treemacs-git-mode)
    :bind (([f8]        . treemacs)
           ("M-0"       . treemacs-select-window)
           ("C-x 1"     . treemacs-delete-other-windows)
           ("C-x t 1"   . treemacs-delete-other-windows)
           ("C-x t t"   . treemacs)
           ("C-x t b"   . treemacs-bookmark)
           ("C-x t C-t" . treemacs-find-file)
           ("C-x t M-t" . treemacs-find-tag)
           :map treemacs-mode-map
           ([mouse-1]   . treemacs-single-click-expand-action))
    :init
    (with-eval-after-load 'winum
      (bind-key (kbd "M-9") #'treemacs-select-window winum-keymap))
    :config
    (setq treemacs-collapse-dirs                 (if (executable-find "python") 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-display-in-side-window        t
          treemacs-file-event-delay              5000
          treemacs-file-follow-delay             0.2
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-desc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-width                         30)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    ;; (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null (executable-find "python3"))))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))

  ;; Projectile integration for treemacs
  (use-package treemacs-projectile
    :after treemacs projectile
    :bind (([M-f8] . treemacs-projectile)
           :map projectile-command-map
           ("h" . treemacs-projectile)))

 
  (use-package treemacs-magit
    :after treemacs magit
    :commands treemacs-magit--schedule-update
    :hook ((magit-post-commit
            git-commit-post-finish
            magit-post-stage
            magit-post-unstage)
. treemacs-magit--schedule-update))

#+END_SRC




** TeX


Use latex-preview-pane for comfortable editing.




#+BEGIN_SRC emacs-lisp :tangle yes
  
(use-package ob-latex
  :ensure nil
  :after org
  :custom (org-latex-compiler "xelatex"))

; (use-package latex-preview-pane
;    :config
;    (when (display-graphic-p)
;      (latex-preview-pane-enable)))

(use-package bibtex
  :after auctex
  :hook (bibtex-mode . my/bibtex-fill-column)
  :preface
  (defun my/bibtex-fill-column ()
    "Ensures that each entry does not exceed 120 characters."
    (setq fill-column 120)))


(use-package reftex
;  :after auctex
  :custom
  (reftex-plug-into-AUCTeX t)
  (reftex-save-parse-info t)
  (reftex-use-multiple-selection-buffers t))

(setq org-latex-pdf-process
      '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "bibtex %b"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

;(setq global-set key (kbd "C-c j") 'org-ref-extract-bibtex-entries)


#+END_SRC
 

#+END_SRC

To compile the current file, we resort to Rubber, an external tool.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun rubber-compile-file ()
    (interactive)
    (shell-command
     (concat "rubber -d " buffer-file-name))
    (message "Finished LaTeX compilation."))
#+END_SRC

It is also interesting to have pretty symbols for our LaTeX files.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package latex-pretty-symbols)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-ref)

#+END_SRC



#+BEGIN_SRC emacs-lisp :tangle yes
(with-eval-after-load 'org
(org-babel-do-load-languages 'org-babel-load-languages
                             '((lisp   . t)
                               (shell  . t)
                               (gnuplot    . t)
                               (js     . t)
                               (R      . t)
                               (scheme . t)
                               (python   . t)
                               (ipython . t)
                               (ein    . t)
                               (ditaa . t)
                               (plantuml .t)
                               (latex .t)
                               )
                               )
                               )

#+END_SRC




** Markdown 

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
  #+END_SRC




* Custom Block Org mode
** Custom Koma-class

#+BEGIN_SRC emacs-lisp :tangle yes 
     (add-to-list 'org-latex-classes
                   '("koma-article" "\\documentclass{scrartcl}"
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                     ("\\paragraph{%s}" . "\\paragraph*{%s}")
                     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC


** Custom Beamer

#+BEGIN_SRC emacs-lisp :tangle yes 
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted) 

(setq org-latex-listings t
      org-latex-packages-alist '(("" "listings") ("" "color")))

#+END_SRC



#+BEGIN_SRC emacs-lisp :tangle yes 
;(require 'org-tempo)
;
(add-to-list 'org-structure-template-alist '("em" . "src emacs-lisp :tangle yes"))
(add-to-list 'org-structure-template-alist '("py" . "src ein-python :session py :results :exports none"))



;;;; CONFIG BLOCK LATEX
;(add-to-list 'org-structure-template-alist '("ba" . "#+ATTR_LATEX: :options [logo=\\bcattention, noborder=true, barre=none] {Alerta}"))
;(add-to-list 'org-structure-template-alist '("bc" "#+BEGIN_bclogo \n\n#+END_bclogo" "<src lang=\"?\">\n\n</src>"))
#+END_SRC